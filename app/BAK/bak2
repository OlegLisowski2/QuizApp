package com.example.quizapp

import android.content.Context
import android.content.Intent
import android.content.SharedPreferences
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.CheckBox
import android.widget.EditText
import android.widget.TextView
import androidx.fragment.app.Fragment
import androidx.viewpager2.widget.ViewPager2
import com.example.quizapp.databinding.QuestionsAnswersCreateBinding

class QuizQuestionFragment : Fragment(R.layout.questions_answers_create) {
    private var _binding: QuestionsAnswersCreateBinding? = null
    private val binding get() = _binding!!

    companion object {
        private const val ARG_INDEX       = "arg_index"
        private const val PREFS_NAME      = "quiz_input_prefs"
        private const val MAX_QUESTIONS   = 40

        // Base keys; real key = base + "_" + index
        internal const val KEY_QUESTION    = "key_question"
        internal const val KEY_ANSWER_A    = "key_answer_a"
        internal const val KEY_ANSWER_B    = "key_answer_b"
        internal const val KEY_ANSWER_C    = "key_answer_c"
        internal const val KEY_ANSWER_D    = "key_answer_d"
        internal const val KEY_CB_A        = "key_cb_a"
        internal const val KEY_CB_B        = "key_cb_b"
        internal const val KEY_CB_C        = "key_cb_c"
        internal const val KEY_CB_D        = "key_cb_d"

        fun newInstance(index: Int): QuizQuestionFragment = QuizQuestionFragment().apply {
            arguments = Bundle().apply { putInt(ARG_INDEX, index) }
        }
    }

    private val index: Int by lazy { requireArguments().getInt(ARG_INDEX) }
    private lateinit var prefs: SharedPreferences

    private lateinit var textFields: List<Pair<EditText,String>>
    private lateinit var checkFields: List<Pair<CheckBox,String>>

    private lateinit var etQuestion: EditText
    private lateinit var etAnswerA:  EditText
    private lateinit var etAnswerB:  EditText
    private lateinit var etAnswerC:  EditText
    private lateinit var etAnswerD:  EditText

    private lateinit var cbAnswerA:  CheckBox
    private lateinit var cbAnswerB:  CheckBox
    private lateinit var cbAnswerC:  CheckBox
    private lateinit var cbAnswerD:  CheckBox


    private lateinit var btnMainCreatePage: Button
    private lateinit var btnPrevQuestion: Button
    private lateinit var btnNextQuestion: Button
    private lateinit var btnDelete: Button

    private lateinit var tvCounter: TextView

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = QuestionsAnswersCreateBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        // First bind views, then initialize preferences and load data

        prefs = requireContext().getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)



        bindViews(view)

        // Define your mappings
        val textFields: List<Pair<EditText, String>> = listOf(
            binding.etQuestion to KEY_QUESTION,
            binding.etAnswerA  to KEY_ANSWER_A,
            binding.etAnswerB  to KEY_ANSWER_B,
            binding.etAnswerC  to KEY_ANSWER_C,
            binding.etAnswerD  to KEY_ANSWER_D
        )

        val checkFields: List<Pair<CheckBox, String>> = listOf(
            binding.cbAnswerA to KEY_CB_A,
            binding.cbAnswerB to KEY_CB_B,
            binding.cbAnswerC to KEY_CB_C,
            binding.cbAnswerD to KEY_CB_D
        )

        loadSavedInput(textFields, checkFields)
        updateCounter()

        // set the counter text: "Frage X von Y"
        val total = (requireActivity() as QuizPagerActivity).questionCount
        tvCounter.text = getString(R.string.question_counter, index, total)

        btnMainCreatePage.setOnClickListener {
            // 1) grab the current page
            val currentPage = (requireActivity() as QuizPagerActivity).viewPager.currentItem
            // 2) write it to SharedPreferences
            requireContext()
                .getSharedPreferences("quiz_prefs", Context.MODE_PRIVATE)
                .edit()
                .putInt("last_page_index", currentPage)
                .apply()

            // 3) go back to the QuizCreateActivity
            startActivity(Intent(requireContext(), QuizCreateActivity::class.java))
        }

        btnPrevQuestion.setOnClickListener {
            val pager = requireActivity()
                .findViewById<ViewPager2>(R.id.viewPager)
            pager.currentItem = (index - 2).coerceAtLeast(0)
        }

        btnNextQuestion.setOnClickListener {
            val activity = requireActivity() as QuizPagerActivity
            if (index == activity.questionCount && activity.questionCount < MAX_QUESTIONS) {
                activity.addPage()
            }
            activity.viewPager.currentItem = index
        }

        // Delete current question
        btnDelete.setOnClickListener {
            (requireActivity() as QuizPagerActivity).deletePage(index)
        }

    }

    fun updateCounter() {
        val total = (requireActivity() as QuizPagerActivity).questionCount
        tvCounter.text = getString(R.string.question_counter, index, total)
    }

    override fun onPause() {
        super.onPause()
        saveInput(textFields, checkFields)
    }

    private fun bindViews(v: View) {
        etQuestion = v.findViewById(R.id.etQuestion)
        etAnswerA  = v.findViewById(R.id.etAnswerA)
        etAnswerB  = v.findViewById(R.id.etAnswerB)
        etAnswerC  = v.findViewById(R.id.etAnswerC)
        etAnswerD  = v.findViewById(R.id.etAnswerD)

        cbAnswerA  = v.findViewById(R.id.cbAnswerA)
        cbAnswerB  = v.findViewById(R.id.cbAnswerB)
        cbAnswerC  = v.findViewById(R.id.cbAnswerC)
        cbAnswerD  = v.findViewById(R.id.cbAnswerD)


        btnPrevQuestion = v.findViewById(R.id.btnPrevQuestion)
        btnNextQuestion = v.findViewById(R.id.btnNextQuestion)
        btnDelete = v.findViewById(R.id.btnDeleteQuestion)

        tvCounter  = v.findViewById(R.id.tvQuestionCounter)
    }

    private fun saveInput(
        textFields: List<Pair<EditText, String>>,
        checkFields: List<Pair<CheckBox, String>>
    ) {
        prefs.edit().apply {
            textFields.forEach { (view, base) ->
                putString("${base}_$index", view.text.toString())
            }
            checkFields.forEach { (view, base) ->
                putBoolean("${base}_$index", view.isChecked)
            }
            apply()
        }
    }

    private fun loadSavedInput(
        textFields: List<Pair<EditText, String>>,
        checkFields: List<Pair<CheckBox, String>>
    ) {
        textFields.forEach { (view, base) ->
            val value = prefs.getString("${base}_$index", "") ?: ""
            view.setText(value)
        }
        checkFields.forEach { (view, base) ->
            val checked = prefs.getBoolean("${base}_$index", false)
            view.isChecked = checked
        }
    }
}